// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: gpu_api.proto

package gpu_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error int32

const (
	// No error occurred.
	Error_ERROR_OK Error = 0
	// Unknown error.
	Error_ERROR_UNKNOWN Error = 1
	// Bad request, the request are refused to continue.
	Error_ERROR_BAD_REQUEST Error = 2
	// The Api request can amdin only.
	Error_ERROR_PERMISSION_DENIED Error = 100
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0:   "ERROR_OK",
		1:   "ERROR_UNKNOWN",
		2:   "ERROR_BAD_REQUEST",
		100: "ERROR_PERMISSION_DENIED",
	}
	Error_value = map[string]int32{
		"ERROR_OK":                0,
		"ERROR_UNKNOWN":           1,
		"ERROR_BAD_REQUEST":       2,
		"ERROR_PERMISSION_DENIED": 100,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_api_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_gpu_api_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_gpu_api_proto_rawDescGZIP(), []int{0}
}

// AgentStatus descripts status of agent.
type AgentStatus int32

const (
	// Unknown status.
	AgentStatus_AGENT_STATUS_UNKNOWN AgentStatus = 0
	// The agent initial.
	AgentStatus_AGENT_STATUS_INITIAL AgentStatus = 1
	// The agent is health running.
	AgentStatus_AGENT_STATUS_HEALTH AgentStatus = 50
	// The agent unhealth.
	AgentStatus_AGENT_STATUS_UNHEALTH AgentStatus = 100
)

// Enum value maps for AgentStatus.
var (
	AgentStatus_name = map[int32]string{
		0:   "AGENT_STATUS_UNKNOWN",
		1:   "AGENT_STATUS_INITIAL",
		50:  "AGENT_STATUS_HEALTH",
		100: "AGENT_STATUS_UNHEALTH",
	}
	AgentStatus_value = map[string]int32{
		"AGENT_STATUS_UNKNOWN":  0,
		"AGENT_STATUS_INITIAL":  1,
		"AGENT_STATUS_HEALTH":   50,
		"AGENT_STATUS_UNHEALTH": 100,
	}
)

func (x AgentStatus) Enum() *AgentStatus {
	p := new(AgentStatus)
	*p = x
	return p
}

func (x AgentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_api_proto_enumTypes[1].Descriptor()
}

func (AgentStatus) Type() protoreflect.EnumType {
	return &file_gpu_api_proto_enumTypes[1]
}

func (x AgentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatus.Descriptor instead.
func (AgentStatus) EnumDescriptor() ([]byte, []int) {
	return file_gpu_api_proto_rawDescGZIP(), []int{1}
}

// TaskStatus descripts the life cycle of a task.
type TaskStatus int32

const (
	// Unknown status.
	TaskStatus_TASK_STATUS_UNKNOWN TaskStatus = 0
	// The task initial.
	TaskStatus_TASK_STATUS_INITIAL TaskStatus = 1
	// The task accepted by scheduler and created.
	TaskStatus_TASK_STATUS_CREATED TaskStatus = 2
	// The task is running.
	TaskStatus_TASK_STATUS_RUNNING TaskStatus = 50
	// The task exited with unexcepted reason.
	TaskStatus_TASK_STATUS_EXITED TaskStatus = 99
	// The task finished.
	TaskStatus_TASK_STATUS_FINISHED TaskStatus = 100
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0:   "TASK_STATUS_UNKNOWN",
		1:   "TASK_STATUS_INITIAL",
		2:   "TASK_STATUS_CREATED",
		50:  "TASK_STATUS_RUNNING",
		99:  "TASK_STATUS_EXITED",
		100: "TASK_STATUS_FINISHED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNKNOWN":  0,
		"TASK_STATUS_INITIAL":  1,
		"TASK_STATUS_CREATED":  2,
		"TASK_STATUS_RUNNING":  50,
		"TASK_STATUS_EXITED":   99,
		"TASK_STATUS_FINISHED": 100,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_api_proto_enumTypes[2].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_gpu_api_proto_enumTypes[2]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_gpu_api_proto_rawDescGZIP(), []int{2}
}

// TaskError return the error of a task.
type TaskError int32

const (
	// Unknowm task error.
	TaskError_TASK_ERROR_UNKNOWN TaskError = 0
	// Everything is ok.
	TaskError_TASK_ERROR_OK TaskError = 1
)

// Enum value maps for TaskError.
var (
	TaskError_name = map[int32]string{
		0: "TASK_ERROR_UNKNOWN",
		1: "TASK_ERROR_OK",
	}
	TaskError_value = map[string]int32{
		"TASK_ERROR_UNKNOWN": 0,
		"TASK_ERROR_OK":      1,
	}
)

func (x TaskError) Enum() *TaskError {
	p := new(TaskError)
	*p = x
	return p
}

func (x TaskError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskError) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_api_proto_enumTypes[3].Descriptor()
}

func (TaskError) Type() protoreflect.EnumType {
	return &file_gpu_api_proto_enumTypes[3]
}

func (x TaskError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskError.Descriptor instead.
func (TaskError) EnumDescriptor() ([]byte, []int) {
	return file_gpu_api_proto_rawDescGZIP(), []int{3}
}

// Meta is the information of agent.
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname   string      `protobuf:"bytes,1,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Labels     []string    `protobuf:"bytes,2,rep,name=Labels,proto3" json:"Labels,omitempty"`
	Ip         string      `protobuf:"bytes,3,opt,name=Ip,proto3" json:"Ip,omitempty"`
	ServerName string      `protobuf:"bytes,4,opt,name=ServerName,proto3" json:"ServerName,omitempty"`
	Status     AgentStatus `protobuf:"varint,5,opt,name=Status,proto3,enum=gpu_api.AgentStatus" json:"Status,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_gpu_api_proto_rawDescGZIP(), []int{0}
}

func (x *Meta) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Meta) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Meta) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Meta) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *Meta) GetStatus() AgentStatus {
	if x != nil {
		return x.Status
	}
	return AgentStatus_AGENT_STATUS_UNKNOWN
}

// Task is scheduling instance communicate with manager ane agent.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string     `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	TaskName     string     `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	Status       TaskStatus `protobuf:"varint,3,opt,name=Status,proto3,enum=gpu_api.TaskStatus" json:"Status,omitempty"`
	Image        string     `protobuf:"bytes,4,opt,name=Image,proto3" json:"Image,omitempty"`
	Commands     []string   `protobuf:"bytes,5,rep,name=Commands,proto3" json:"Commands,omitempty"`
	Volumes      []string   `protobuf:"bytes,6,rep,name=Volumes,proto3" json:"Volumes,omitempty"`
	Environments []string   `protobuf:"bytes,7,rep,name=Environments,proto3" json:"Environments,omitempty"`
	ContainerId  string     `protobuf:"bytes,8,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
	CreatedTime  string     `protobuf:"bytes,9,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"`
	UpdatedTime  string     `protobuf:"bytes,10,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	DeletedTime  string     `protobuf:"bytes,11,opt,name=DeletedTime,proto3" json:"DeletedTime,omitempty"`
	Error        TaskError  `protobuf:"varint,12,opt,name=Error,proto3,enum=gpu_api.TaskError" json:"Error,omitempty"`
	ErrorInfo    string     `protobuf:"bytes,13,opt,name=ErrorInfo,proto3" json:"ErrorInfo,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_gpu_api_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNKNOWN
}

func (x *Task) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Task) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Task) GetVolumes() []string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *Task) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *Task) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *Task) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Task) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Task) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

func (x *Task) GetError() TaskError {
	if x != nil {
		return x.Error
	}
	return TaskError_TASK_ERROR_UNKNOWN
}

func (x *Task) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

// ReportRequest is the tasks' informations from agent.
type ReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta  *Meta   `protobuf:"bytes,1,opt,name=Meta,proto3" json:"Meta,omitempty"`
	Tasks []*Task `protobuf:"bytes,2,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_gpu_api_proto_rawDescGZIP(), []int{2}
}

func (x *ReportRequest) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ReportRequest) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// ReportResponse is the tasks' excepted status from manager.
type ReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Task `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_gpu_api_proto_rawDescGZIP(), []int{3}
}

func (x *ReportResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

var File_gpu_api_proto protoreflect.FileDescriptor

var file_gpu_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x22, 0x98, 0x01, 0x0a, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67,
	0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x35, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2a, 0x5c, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x64, 0x2a, 0x75, 0x0a, 0x0b, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x32, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x10, 0x64, 0x2a, 0xa2, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x10, 0x63, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x64, 0x2a, 0x36, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x32,
	0x49, 0x0a, 0x06, 0x47, 0x70, 0x75, 0x41, 0x70, 0x69, 0x12, 0x3f, 0x0a, 0x06, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x70,
	0x75, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f,
	0x3b, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gpu_api_proto_rawDescOnce sync.Once
	file_gpu_api_proto_rawDescData = file_gpu_api_proto_rawDesc
)

func file_gpu_api_proto_rawDescGZIP() []byte {
	file_gpu_api_proto_rawDescOnce.Do(func() {
		file_gpu_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_gpu_api_proto_rawDescData)
	})
	return file_gpu_api_proto_rawDescData
}

var file_gpu_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_gpu_api_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gpu_api_proto_goTypes = []interface{}{
	(Error)(0),             // 0: gpu_api.Error
	(AgentStatus)(0),       // 1: gpu_api.AgentStatus
	(TaskStatus)(0),        // 2: gpu_api.TaskStatus
	(TaskError)(0),         // 3: gpu_api.TaskError
	(*Meta)(nil),           // 4: gpu_api.Meta
	(*Task)(nil),           // 5: gpu_api.Task
	(*ReportRequest)(nil),  // 6: gpu_api.ReportRequest
	(*ReportResponse)(nil), // 7: gpu_api.ReportResponse
}
var file_gpu_api_proto_depIdxs = []int32{
	1, // 0: gpu_api.Meta.Status:type_name -> gpu_api.AgentStatus
	2, // 1: gpu_api.Task.Status:type_name -> gpu_api.TaskStatus
	3, // 2: gpu_api.Task.Error:type_name -> gpu_api.TaskError
	4, // 3: gpu_api.ReportRequest.Meta:type_name -> gpu_api.Meta
	5, // 4: gpu_api.ReportRequest.Tasks:type_name -> gpu_api.Task
	5, // 5: gpu_api.ReportResponse.Tasks:type_name -> gpu_api.Task
	6, // 6: gpu_api.GpuApi.Report:input_type -> gpu_api.ReportRequest
	7, // 7: gpu_api.GpuApi.Report:output_type -> gpu_api.ReportResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_gpu_api_proto_init() }
func file_gpu_api_proto_init() {
	if File_gpu_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gpu_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gpu_api_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gpu_api_proto_goTypes,
		DependencyIndexes: file_gpu_api_proto_depIdxs,
		EnumInfos:         file_gpu_api_proto_enumTypes,
		MessageInfos:      file_gpu_api_proto_msgTypes,
	}.Build()
	File_gpu_api_proto = out.File
	file_gpu_api_proto_rawDesc = nil
	file_gpu_api_proto_goTypes = nil
	file_gpu_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GpuApiClient is the client API for GpuApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GpuApiClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (GpuApi_ReportClient, error)
}

type gpuApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGpuApiClient(cc grpc.ClientConnInterface) GpuApiClient {
	return &gpuApiClient{cc}
}

func (c *gpuApiClient) Report(ctx context.Context, opts ...grpc.CallOption) (GpuApi_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GpuApi_serviceDesc.Streams[0], "/gpu_api.GpuApi/Report", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpuApiReportClient{stream}
	return x, nil
}

type GpuApi_ReportClient interface {
	Send(*ReportRequest) error
	Recv() (*ReportResponse, error)
	grpc.ClientStream
}

type gpuApiReportClient struct {
	grpc.ClientStream
}

func (x *gpuApiReportClient) Send(m *ReportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gpuApiReportClient) Recv() (*ReportResponse, error) {
	m := new(ReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GpuApiServer is the server API for GpuApi service.
type GpuApiServer interface {
	Report(GpuApi_ReportServer) error
}

// UnimplementedGpuApiServer can be embedded to have forward compatible implementations.
type UnimplementedGpuApiServer struct {
}

func (*UnimplementedGpuApiServer) Report(GpuApi_ReportServer) error {
	return status.Errorf(codes.Unimplemented, "method Report not implemented")
}

func RegisterGpuApiServer(s *grpc.Server, srv GpuApiServer) {
	s.RegisterService(&_GpuApi_serviceDesc, srv)
}

func _GpuApi_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GpuApiServer).Report(&gpuApiReportServer{stream})
}

type GpuApi_ReportServer interface {
	Send(*ReportResponse) error
	Recv() (*ReportRequest, error)
	grpc.ServerStream
}

type gpuApiReportServer struct {
	grpc.ServerStream
}

func (x *gpuApiReportServer) Send(m *ReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gpuApiReportServer) Recv() (*ReportRequest, error) {
	m := new(ReportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GpuApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gpu_api.GpuApi",
	HandlerType: (*GpuApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _GpuApi_Report_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gpu_api.proto",
}
